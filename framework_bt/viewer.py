# framework_bt/viewer.py
"""
bt-view  ─ quick viewer for Parquet files generated by bt-extract

Usage:
    bt-view                    # detects utxos_*.parquet in the current directory
    bt-view --prefix foo       # searches for foo_*.parquet
    bt-view --prefix "*"       # searches for all *.parquet files
    bt-view --head 20          # displays the first 20 rows
"""

from pathlib import Path
import click
import pyarrow.parquet as pq
import pandas as pd

SATOSHI = 100_000_000  # for converting to BTC


@click.command()
@click.option("--prefix", default="utxos", show_default=True,
              help="Prefix of the Parquet files to list (use '*' for all)")
@click.option("--head", default=10, show_default=True,
              help="Number of rows to display")
def main(prefix: str, head: int):
    pattern = "*.parquet" if prefix == "*" else f"{prefix}_*.parquet"
    files = sorted(Path(".").glob(pattern))
    if not files:
        click.echo(f"No {pattern} files found in the current directory.")
        return

    click.echo("Files found:")
    for idx, f in enumerate(files, 1):
        size_mb = f.stat().st_size / 1_048_576
        click.echo(f"  [{idx}] {f.name:<30} {size_mb:6.1f} MB")

    choice = click.prompt("Select a file number", type=click.IntRange(1, len(files)))
    sel = files[choice - 1]

    click.echo(f"\nOpening {sel.name} …")
    table = pq.read_table(sel)
    df = table.to_pandas()

    # Display first N rows
    click.echo(df.head(head).to_string(index=False))

    # ── basic summary ─────────────────────────────────────
    total_rows   = len(df)
    total_value  = df["value"].sum() / SATOSHI        # BTC
    size_mb      = sel.stat().st_size / 1_048_576

    click.echo("\nSummary:")
    click.echo(f"  ▸ total rows         : {total_rows:,}")
    click.echo(f"  ▸ total value        : {total_value:,.8f} BTC")
    click.echo(f"  ▸ file size          : {size_mb:.1f} MB")

    # Summary by UTXO type
    click.echo("\n  Distribution by 'type':")
    dist = (
        df.groupby("type")
          .agg(count=("type", "size"), sats=("value", "sum"))
          .sort_values("count", ascending=False)
    )
    dist["btc"] = dist["sats"] / SATOSHI
    dist = dist.drop(columns="sats")
    click.echo(dist.to_string())

    # ── optional: weight analysis by transaction format ─────────────
    if "is_segwit" in df.columns and "weight" in df.columns:
        click.echo("\nTransaction format summary (SegWit vs Legacy):")

        segwit_df = df[df["is_segwit"] == True]
        legacy_df = df[df["is_segwit"] == False]

        segwit_count = len(segwit_df)
        segwit_weight = segwit_df["weight"].sum()

        legacy_count = len(legacy_df)
        legacy_weight = legacy_df["weight"].sum()

        total_weight = df["weight"].sum()

        click.echo(f"  ▸ SegWit transactions : {segwit_count:,} txs")
        click.echo(f"     ↳ total weight     : {segwit_weight:,} WU")

        click.echo(f"  ▸ Legacy transactions : {legacy_count:,} txs")
        click.echo(f"     ↳ total weight     : {legacy_weight:,} WU")

        click.echo(f"\n  ▸ Overall total weight: {total_weight:,} WU")

    click.echo("\nDone.")


if __name__ == "__main__":
    main()
